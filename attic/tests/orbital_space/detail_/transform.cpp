#include "chemist/orbital_space/transform.hpp"
#include "chemist/ta_helpers/ta_helpers.hpp"
#include "transform_data.hpp"
#include <catch2/catch.hpp>

using namespace chemist;
using namespace chemist::detail_;

/* Testing strategy.
 *
 * The transform functions only really rely on the transformation matrices of
 * the DerivedSpace instances. AOSpace instances are essentially placeholders
 * so that we know which modes to transform. For simplicity we assume that the
 * modes of the tensor that we are transforming are all of length 2. We do let
 * the transform lengths vary though.
 *
 * Also note that the unit tests for transform simply test for correctness they
 * can not determine if we really have done the requested transformation in the
 * cheapest way possible.
 */

using ta_helpers::allclose;
using scalar_types = std::tuple<float, double>;

TEMPLATE_LIST_TEST_CASE("do_which_first (2 spaces)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    auto s23    = make_space23<T>(world);
    auto s24    = make_space24<T>(world);

    SECTION("Same size") { REQUIRE_FALSE(do_which_first(s23, s23)); }

    SECTION("rows less than columns") {
        SECTION("First is smaller") { REQUIRE_FALSE(do_which_first(s23, s24)); }
        SECTION("Second is smaller") { REQUIRE(do_which_first(s24, s23)); }
    }

    SECTION("columns less than rows") {
        auto s32 = make_space32<T>(world);
        auto s43 = make_space43<T>(world);

        SECTION("First is smaller") { REQUIRE_FALSE(do_which_first(s32, s43)); }
        SECTION("Second is smaller") { REQUIRE(do_which_first(s43, s32)); }
    }
}

TEMPLATE_LIST_TEST_CASE("do_which_first (3 spaces)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    auto s22    = make_space22<T>(world);
    auto s23    = make_space23<T>(world);
    auto s24    = make_space24<T>(world);

    SECTION("Same size") { REQUIRE(do_which_first(s23, s23, s23) == 0); }

    SECTION("First is smallest") {
        REQUIRE(do_which_first(s22, s23, s24) == 0);
        REQUIRE(do_which_first(s22, s24, s23) == 0);
    }

    SECTION("Second is smallest") {
        REQUIRE(do_which_first(s23, s22, s24) == 1);
        REQUIRE(do_which_first(s24, s22, s23) == 1);
    }
    SECTION("Third is smallest") {
        REQUIRE(do_which_first(s23, s24, s22) == 2);
        REQUIRE(do_which_first(s24, s23, s22) == 2);
    }
}

TEMPLATE_LIST_TEST_CASE("do_which_first (4 spaces)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    auto s22    = make_space22<T>(world);
    auto s23    = make_space23<T>(world);
    auto s24    = make_space24<T>(world);
    auto s25    = make_space25<T>(world);
    SECTION("Same size") { REQUIRE(do_which_first(s23, s23, s23, s23) == 0); }

    SECTION("First is smallest") {
        REQUIRE(do_which_first(s22, s23, s24, s25) == 0);
        REQUIRE(do_which_first(s22, s23, s25, s24) == 0);
        REQUIRE(do_which_first(s22, s24, s23, s25) == 0);
        REQUIRE(do_which_first(s22, s24, s25, s23) == 0);
        REQUIRE(do_which_first(s22, s25, s23, s24) == 0);
        REQUIRE(do_which_first(s22, s25, s24, s23) == 0);
    }

    SECTION("Second is smallest") {
        REQUIRE(do_which_first(s23, s22, s24, s25) == 1);
        REQUIRE(do_which_first(s23, s22, s25, s24) == 1);
        REQUIRE(do_which_first(s24, s22, s23, s25) == 1);
        REQUIRE(do_which_first(s24, s22, s25, s23) == 1);
        REQUIRE(do_which_first(s25, s22, s23, s24) == 1);
        REQUIRE(do_which_first(s25, s22, s24, s23) == 1);
    }
    SECTION("Third is smallest") {
        REQUIRE(do_which_first(s23, s24, s22, s25) == 2);
        REQUIRE(do_which_first(s23, s25, s22, s24) == 2);
        REQUIRE(do_which_first(s24, s23, s22, s25) == 2);
        REQUIRE(do_which_first(s24, s25, s22, s23) == 2);
        REQUIRE(do_which_first(s25, s23, s22, s24) == 2);
        REQUIRE(do_which_first(s25, s24, s22, s24) == 2);
    }
    SECTION("Fourth is smallest") {
        REQUIRE(do_which_first(s23, s24, s25, s22) == 3);
        REQUIRE(do_which_first(s23, s25, s24, s22) == 3);
        REQUIRE(do_which_first(s24, s23, s25, s22) == 3);
        REQUIRE(do_which_first(s24, s25, s23, s22) == 3);
        REQUIRE(do_which_first(s25, s23, s24, s22) == 3);
        REQUIRE(do_which_first(s25, s24, s23, s22) == 3);
    }
}

TEMPLATE_LIST_TEST_CASE("transform(matrix)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    TA::TSpArray<T> I(world, {{1.0, 2.0}, {3.0, 4.0}});

    auto c23 = make_space23<T>(world);
    auto c24 = make_space24<T>(world);
    auto aos = c23.from_space();
    SECTION("AO AO") { REQUIRE(allclose(I, transform(aos, aos, I))); }
    SECTION("Derived AO") {
        auto rv = transform(c23, aos, I);
        auto corr =
          TA::TSpArray<T>(world, {{1.8, 2.48}, {2.24, 3.14}, {2.79, 4.02}});
        REQUIRE(allclose(corr, rv));
    }
    SECTION("AO Derived") {
        auto rv   = transform(aos, c24, I);
        auto corr = TA::TSpArray<T>(
          world, {{1.46, 1.79, 2.23, 2.36}, {3.04, 3.81, 4.91, 5.28}});
        REQUIRE(allclose(corr, rv));
    }
    SECTION("Derived Derived") {
        auto rv   = transform(c23, c24, I);
        auto corr = TA::TSpArray<T>(world, {{1.8776, 2.3484, 3.0172, 3.24},
                                            {2.3726, 2.9644, 3.8026, 4.0804},
                                            {3.0282, 3.7773, 4.8333, 5.1804}});
        REQUIRE(allclose(corr, rv));
    }
}

TEMPLATE_LIST_TEST_CASE("transform(rank 3)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    TA::TSpArray<T> I(world,
                      {{{1.0, 2.0}, {3.0, 4.0}}, {{5.0, 6.0}, {7.0, 8.0}}});

    auto s22 = make_space22<T>(world);
    auto s23 = make_space23<T>(world);
    auto s24 = make_space24<T>(world);
    auto aos = s22.from_space();

    SECTION("AO AO AO") {
        REQUIRE(allclose(chemist::transform(aos, aos, aos, I), I));
    }

    SECTION("Derived AO AO") {
        auto rv = transform(s22, aos, aos, I);
        TA::TSpArray<T> corr(
          world, {{{1.82, 2.28}, {2.74, 3.2}}, {{2.48, 3.16}, {3.84, 4.52}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("AO Derived AO") {
        auto rv = transform(aos, s23, aos, I);
        TA::TSpArray<T> corr(world, {{{1.8000000000000003, 2.4800000000000004},
                                      {2.24, 3.14},
                                      {2.79, 4.0200000000000005}},
                                     {{4.5200000000000005, 5.2},
                                      {5.840000000000001, 6.74},
                                      {7.71, 8.940000000000001}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("AO AO Derived") {
        auto rv = chemist::transform(aos, aos, s24, I);
        TA::TSpArray<T> corr(
          world, {{{1.46, 1.79, 2.23, 2.36}, {3.04, 3.81, 4.91, 5.28}},
                  {{4.62, 5.83, 7.59, 8.2}, {6.2, 7.85, 10.27, 11.12}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("Derived Derived AO") {
        auto rv = chemist::transform(s22, s23, aos, I);
        TA::TSpArray<T> corr(world, {{{1.7528000000000001, 2.0656000000000003},
                                      {2.2544000000000004, 2.6684},
                                      {2.9562000000000004, 3.5220000000000002}},
                                     {{2.4480000000000004, 2.9104000000000005},
                                      {3.1432000000000007, 3.7552000000000003},
                                      {4.1112, 4.9476}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("Derived AO Derived") {
        auto rv = chemist::transform(s22, aos, s24, I);
        TA::TSpArray<T> corr(
          world,
          {{{1.746, 2.197, 2.8482000000000003, 3.0712},
            {2.4728000000000003, 3.1262000000000008, 4.081,
             4.4144000000000005}},
           {{2.4148000000000005, 3.0352000000000006, 3.9284, 4.232800000000001},
            {3.4892000000000003, 4.4088, 5.7508, 6.218400000000001}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("AO Derived Derived") {
        auto rv = chemist::transform(aos, s23, s24, I);
        TA::TSpArray<T> corr(world, {{{1.8776000000000002, 2.3484000000000003,
                                       3.0172000000000003, 3.2400000000000007},
                                      {2.3726000000000003, 2.9644000000000004,
                                       3.8026000000000004, 4.080400000000001},
                                      {3.0282000000000004, 3.7773000000000003,
                                       4.8332999999999995, 5.180400000000001}},
                                     {{4.026400000000001, 5.095600000000001,
                                       6.662000000000001, 7.211200000000002},
                                      {5.2166000000000015, 6.6004000000000005,
                                       8.6266, 9.336400000000001},
                                      {6.915000000000001, 8.746500000000001,
                                       11.4261, 12.363600000000002}}});
        REQUIRE(allclose(corr, rv));
    }

    SECTION("Derived Derived Derived") {
        auto rv = chemist::transform(s22, s23, s24, I);
        TA::TSpArray<T> corr(world,
                             {{{1.5942880000000004, 2.0143120000000003,
                                2.6271440000000004, 2.8406080000000005},
                               {2.0583560000000003, 2.5998640000000006,
                                3.3893560000000007, 3.664024000000001},
                               {2.7144840000000006, 3.4270860000000005, 4.46487,
                                4.825272000000002}},
                              {{2.243728000000001, 2.8331520000000006,
                                3.6918560000000005, 3.990240000000001},
                               {2.8931680000000006, 3.651992000000001,
                                4.7565680000000015, 5.139872},
                               {3.808236000000001, 4.804704000000001,
                                6.2534040000000015, 6.7551120000000004}}});
        REQUIRE(allclose(corr, rv));
    }
}

TEMPLATE_LIST_TEST_CASE("transform(rank 4)", "", scalar_types) {
    using T     = TestType;
    auto& world = TA::get_default_world();
    TA::TSpArray<T> I(world,
                      {{{{1.0, 2.0}, {3.0, 4.0}}, {{5.0, 6.0}, {7.0, 8.0}}},
                       {{{9.0, 10.0}, {11.0, 12.0}}, {{13.0, 14.0}, {15.0, 16.0}}}});

    auto s22 = make_space22<T>(world);
    auto s23 = make_space23<T>(world);
    auto s24 = make_space24<T>(world);
    auto s25 = make_space25<T>(world);
    auto aos = s22.from_space();

    SECTION("AO AO AO AO") {
        REQUIRE(allclose(chemist::transform(aos, aos, aos, aos, I), I));
    }

    SECTION("Derived AO AO AO") {
        auto rv = chemist::transform(s22, aos, aos, aos, I);
        TA::TSpArray<T> corr(world, {{{{3.18,3.6400000000000006},{4.1000000000000005,4.5600000000000005}},{{5.02,5.48},{5.94,6.4}}},{{{4.28,4.96},{5.640000000000001,6.32}},{{7.000000000000001,7.68},{8.36,9.040000000000001}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO Derived AO AO") {
        auto rv = chemist::transform(aos, s23, aos, aos, I);
        TA::TSpArray<T> corr(world, {{{{2.9200000000000004,3.6000000000000005},{4.28,4.960000000000001}},{{3.58,4.48},{5.380000000000001,6.28}},{{4.3500000000000005,5.58},{6.8100000000000005,8.040000000000001}}},{{{8.360000000000001,9.040000000000001},{9.72,10.4}},{{10.780000000000001,11.680000000000001},{12.580000000000002,13.48}},{{14.190000000000001,15.42},{16.650000000000002,17.880000000000003}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO AO Derived AO") {
        auto rv = chemist::transform(aos, aos, s24, aos, I);
        TA::TSpArray<T> corr(world, {{{{2.1300000000000003,2.92},{2.57,3.58},{3.12,4.46},{3.2600000000000002,4.720000000000001}},{{5.29,6.08},{6.61,7.62},{8.48,9.82},{9.1,10.56}}},{{{8.45,9.24},{10.65,11.66},{13.84,15.18},{14.940000000000001,16.400000000000002}},{{11.610000000000001,12.4},{14.690000000000001,15.700000000000001},{19.2,20.54},{20.78,22.240000000000002}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO AO AO Derived") {
        auto rv = chemist::transform(aos, aos, aos, s25, I);
        TA::TSpArray<T> corr(world, {{{{1.46,1.79,2.23,2.3600000000000003,0.6900000000000001},{3.04,3.81,4.91,5.28,2.0500000000000003}},{{4.62,5.83,7.59,8.200000000000001,3.41},{6.2,7.8500000000000005,10.27,11.120000000000001,4.7700000000000005}}},{{{7.78,9.870000000000001,12.95,14.040000000000001,6.13},{9.360000000000001,11.89,15.629999999999999,16.96,7.49}},{{10.940000000000001,13.91,18.310000000000002,19.880000000000003,8.850000000000001},{12.52,15.93,20.990000000000002,22.8,10.21}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived Derived AO AO") {
        auto rv = chemist::transform(s22, s23, aos, aos, I);
        TA::TSpArray<T> corr(world, {{{{3.1928000000000005,3.5056000000000003},{3.818400000000001,4.131200000000001}},{{4.0948,4.508800000000001},{4.9228000000000005,5.3368}},{{5.3466000000000005,5.912400000000001},{6.478200000000001,7.0440000000000005}}},{{{4.4336,4.896000000000001},{5.358400000000001,5.820800000000001}},{{5.6744,6.286400000000001},{6.8984000000000005,7.510400000000001}},{{7.386000000000001,8.2224},{9.058800000000002,9.8952}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived AO Derived AO") {
        auto rv = chemist::transform(s22, aos, s24, aos, I);
        TA::TSpArray<T> corr(world, {{{{3.1286000000000005,3.492},{3.9294000000000002,4.394},{5.08,5.696400000000001},{5.4708000000000006,6.1424}},{{4.5822,4.945600000000001},{5.787800000000001,6.2524000000000015},{7.5456,8.162},{8.157200000000001,8.828800000000001}}},{{{4.292400000000001,4.829600000000001},{5.3836,6.070400000000001},{6.945600000000001,7.8568},{7.4728,8.465600000000002}},{{6.4412,6.978400000000001},{8.1308,8.8176},{10.5904,11.5016},{11.444,12.436800000000002}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived AO AO Derived") {
        auto rv = chemist::transform(s22, aos, aos, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.8204000000000002,3.5706000000000007,4.6706,5.056800000000001,2.1670000000000003},{3.5472,4.4998000000000005,5.9033999999999995,6.4,2.7926}},{{4.274000000000001,5.429,7.1362000000000005,7.743200000000001,3.4182000000000006},{5.0008,6.358200000000001,8.369,9.086400000000001,4.043800000000001}}},{{{3.8368,4.8532,6.3404,6.8608,2.9172000000000002},{4.911200000000001,6.226800000000001,8.1628,8.846400000000001,3.842}},{{5.9856,7.6004,9.9852,10.832,4.766800000000001},{7.0600000000000005,8.974,11.8076,12.8176,5.6916}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO DERIVED DERIVED AO") {
        auto rv = chemist::transform(aos, s23, s24, aos, I);
        TA::TSpArray<T> corr(world, {{{{3.2180000000000004,3.7552000000000003},{4.010000000000001,4.6968000000000005},{5.123200000000001,6.034400000000001},{5.4872000000000005,6.480000000000001}},{{4.0342,4.7452000000000005},{5.0198,5.928800000000001},{6.3992,7.605200000000001},{6.8468,8.160800000000002}},{{5.084700000000001,6.056400000000001},{6.3123000000000005,7.554600000000001},{8.0184,9.666599999999999},{8.565000000000001,10.360800000000001}}},{{{7.515600000000001,8.052800000000001},{9.5044,10.191200000000002},{12.4128,13.324000000000002},{13.429600000000002,14.422400000000003}},{{9.7222,10.433200000000003},{12.291800000000002,13.200800000000001},{16.047200000000004,17.2532},{17.358800000000002,18.672800000000002}},{{12.858300000000002,13.830000000000002},{16.250700000000002,17.493000000000002},{21.204,22.8522},{22.931400000000004,24.727200000000003}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO DERIVED AO DERIVED") {
        auto rv = chemist::transform(aos, s23, aos, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.7624000000000004,3.4796000000000005,4.518000000000001,4.875200000000001,1.9924000000000004},{3.8368,4.853200000000001,6.340400000000001,6.860800000000001,2.9172000000000002}},{{3.4312000000000005,4.317800000000001,5.5982,6.036800000000001,2.4434000000000005},{4.853200000000001,6.135800000000001,8.010200000000001,8.664800000000001,3.6674}},{{4.2606,5.3529,6.9237,7.458,2.970300000000001},{6.204000000000001,7.8375,10.2201,11.049600000000002,4.6431000000000004}}},{{{7.0600000000000005,8.974,11.8076,12.817600000000002,5.691600000000001},{8.1344,10.347600000000002,13.63,14.803200000000002,6.6164000000000005}},{{9.119200000000001,11.5898,15.246200000000002,16.5488,7.339400000000001},{10.541200000000002,13.407800000000002,17.6582,19.176800000000004,8.563400000000001}},{{12.034200000000002,15.2913,20.109299999999998,21.8244,9.6615},{13.977600000000002,17.7759,23.405700000000003,25.416000000000004,11.334300000000002}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO AO Derived Derived") {
        auto rv = chemist::transform(aos, aos, s24, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.212,2.7675,3.5573000000000006,3.8208000000000006,1.4563000000000001},{2.7070000000000003,3.3835,4.342700000000001,4.661200000000001,1.7577},{3.3626000000000005,4.196400000000001,5.3734,5.7612000000000005,2.1350000000000002},{3.5536000000000003,4.4314,5.6678,6.073600000000001,2.2314000000000003}},{{4.708400000000001,5.959100000000001,7.7917000000000005,8.4344,3.6051000000000006},{5.898600000000001,7.463900000000001,9.7563,10.559600000000001,4.504900000000001},{7.597,9.61,12.5558,13.5868,5.779800000000001},{8.167200000000001,10.329800000000002,13.493400000000001,14.600000000000001,6.2026}}},{{{7.2048000000000005,9.1507,12.0261,13.048000000000002,5.7539},{9.090200000000001,11.5443,15.1699,16.458,7.252100000000001},{11.831400000000002,15.023600000000002,19.7382,21.412399999999998,9.424600000000002},{12.780800000000001,16.2282,21.319000000000003,23.126400000000004,10.173800000000002}},{{9.7012,12.342300000000002,16.2605,17.6616,7.902700000000001},{12.2818,15.6247,20.5835,22.3564,9.999300000000002},{16.065800000000003,20.4372,26.9206,29.238000000000007,13.0694},{17.3944,22.126600000000003,29.144600000000004,31.652800000000006,14.145000000000001}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived Derived Derived AO") {
        auto rv = chemist::transform(s22, s23, s24, aos, I);
        TA::TSpArray<T> corr(world, {{{{2.9414640000000007,3.1885760000000007},{3.712696000000001,4.028624000000001},{4.835136,5.254288000000001},{5.224528000000001,5.681216000000001}},{{3.7896520000000007,4.116712000000001},{4.781588000000001,5.199728000000001},{6.223952000000001,6.778712000000001},{6.7236080000000005,7.328048000000002}},{{4.981986000000001,5.428968000000001},{6.282714,6.854172000000001},{8.171568,8.92974},{8.824476,9.650544000000004}}},{{{4.122160000000001,4.487456000000002},{5.199280000000002,5.666304000000001},{6.764096000000002,7.383712000000001},{7.305376000000001,7.980480000000002}},{{5.302856000000001,5.786336000000001},{6.6858640000000005,7.303984000000002},{8.693056000000002,9.513136000000003},{9.386224000000002,10.279744}},{{6.955716000000001,7.616472000000002},{8.764644,9.609408000000002},{11.386032,12.506808000000003},{12.289080000000002,13.510224000000001}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived Derived AO Derived") {
        auto rv = chemist::transform(s22, s23, aos, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.7318880000000005,3.468712000000001,4.556744,4.943008000000001,2.174232000000001},{3.226112000000001,4.100568000000001,5.395048000000001,5.856384000000002,2.5996400000000004}},{{3.5122720000000003,4.458668000000001,5.855492000000001,6.351008000000001,2.7886040000000003},{4.166392,5.2949480000000015,6.965012000000001,7.559888000000001,3.3516440000000007}},{{4.602900000000001,5.8413900000000005,7.668006,8.315256000000002,3.6413460000000013},{5.496864,6.984306000000001,9.18435,9.967392000000004,4.410834}}},{{{3.8123520000000015,4.838608000000001,6.352560000000001,6.889216000000001,3.019472000000001},{4.542944000000001,5.772656000000001,7.591792000000002,8.239424000000003,3.6483360000000005}},{{4.892816000000002,6.208504000000001,8.148376,8.835424000000001,3.864712000000001},{5.859776000000001,7.444744000000001,9.788536,10.622464,4.697032000000001}},{{6.395328000000001,8.112252000000002,10.641636000000002,11.536320000000003,5.030844000000001},{7.716840000000001,9.80178,12.883188,13.978608000000001,6.168348000000002}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived AO Derived Derived") {
        auto rv = chemist::transform(s22, aos, s24, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.715072,3.443338,4.515750000000001,4.8948160000000005,2.131082},{3.4155080000000004,4.331082000000001,5.678890000000001,6.155064000000001,2.6766380000000005},{4.426188,5.611592000000001,7.355796,7.971560000000001,3.4605640000000006},{4.771904000000001,6.049356,7.9285960000000015,8.591808,3.7268600000000003}},{{3.863416000000001,4.911474000000001,6.463574000000001,7.0170720000000015,3.1195300000000006},{4.883644,6.2080660000000005,8.169146000000001,8.868328000000002,3.9403500000000005},{6.3740120000000005,8.101848,10.6597,11.571336000000002,5.1371720000000005},{6.894160000000001,8.762620000000002,11.528372000000001,12.513952000000003,5.553612000000001}}},{{{3.7509200000000007,4.754340000000001,6.2299240000000005,6.750384,2.9242040000000005},{4.7132000000000005,5.973140000000001,7.825276000000001,8.478176000000001,3.667716000000001},{6.0975280000000005,7.725792,10.118072,10.960656,4.732120000000001},{6.568688,8.321912000000001,10.897144,11.803808000000002,5.091432000000001}},{{5.448472000000001,6.924628,9.109316,9.887632,4.385388},{6.883488000000001,8.747812,11.506524000000002,12.489088000000002,5.535812000000001},{8.976920000000002,11.40704,15.002104000000001,16.282064000000002,7.210584},{9.705936000000001,12.332824000000002,16.218552000000003,17.601760000000002,7.791848000000002}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("AO Derived Derived Derived") {
        auto rv = chemist::transform(aos, s23, s24, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.9021440000000003,3.6691960000000003,4.790228000000001,5.181760000000001,2.1936120000000003},{3.628056000000001,4.585804,5.984652000000001,6.472720000000001,2.733668},{4.657832000000001,5.885168,7.676056000000001,8.299952000000001,3.4928880000000007},{5.000064000000001,6.3164560000000005,8.236440000000002,8.904832000000003,3.7412240000000003}},{{3.6633880000000008,4.629122000000001,6.038618000000001,6.529832000000002,2.750366000000001},{4.574672000000001,5.779018000000001,7.535542000000001,8.147008000000001,3.4225540000000008},{5.8633880000000005,7.403872000000002,9.648268000000002,10.428232000000001,4.363516000000001},{6.289352000000001,7.940188000000002,10.344172,11.178928000000003,4.668964000000001}},{{4.6679520000000005,5.893473,7.678311000000001,8.298192,3.4673130000000008},{5.819058,7.344417,9.564129000000001,10.334028000000002,4.304787},{7.438829999999999,9.38418,12.211554,13.190244,5.468994},{7.969536000000001,10.051374000000001,13.075362000000002,14.121120000000001,5.842158000000001}}},{{{6.2972480000000015,8.009772000000002,10.549012000000001,11.456256000000002,5.11598},{7.968632000000002,10.135148000000001,13.347148000000002,14.494544000000001,6.46986},{10.416616000000001,13.247664,17.444120000000005,18.942768000000004,8.449816},{11.274560000000003,14.338280000000001,18.879256,20.500736000000003,9.142056000000002}},{{8.156908000000001,10.374002,13.660538000000003,14.834312000000002,6.618206000000002},{10.319552000000002,13.123738000000001,17.280022000000002,18.764128000000003,8.367514},{13.485308000000002,17.148352000000003,22.576588000000005,24.514312000000004,10.924156000000002},{14.593832000000003,18.557308000000003,24.430252000000003,26.526448000000002,11.817124000000003}},{{10.809096000000002,13.744809,18.094935000000003,19.647648000000004,8.753361000000002},{13.670394000000002,17.382201000000002,22.881585000000005,24.844092000000007,11.062899000000002},{17.855454,22.701636,29.880257999999998,32.44122,14.435202000000004},{19.318992,24.561438000000003,32.32633800000001,35.096064000000005,15.611310000000003}}}});
        REQUIRE(allclose(rv, corr));
    }

    SECTION("Derived Derived Derived Derived") {
        auto rv = chemist::transform(s22, s23, s24, s25, I);
        TA::TSpArray<T> corr(world, {{{{2.4893216000000007,3.1636260000000007,4.161491440000002,4.516938240000002,2.0026666400000006},{3.1447016000000008,3.996246800000001,5.256188560000002,5.704871360000002,2.527792560000001},{4.100589280000001,5.210425920000001,6.852127520000002,7.4365353600000015,3.292084000000001},{4.433358080000001,5.632989920000001,7.407319840000002,8.038830080000002,3.557245920000001}},{{3.212955280000001,4.082655320000001,5.369217080000001,5.827245920000001,2.5802339600000006},{4.057608320000001,5.155553080000002,6.779472520000002,7.357444480000002,3.2556612400000007},{5.2886112800000005,6.718904320000002,8.833832080000002,9.586253920000003,4.237834960000001},{5.716625120000002,7.262307280000002,9.547586320000002,10.360463680000002,4.578097840000001}},{{4.235246880000001,5.380451820000001,7.073675220000002,7.675983360000002,3.392220300000001},{5.34622092,6.791278380000001,8.927434380000001,9.687074640000002,4.2779601000000005},{6.963513960000002,8.844657840000002,11.624674200000005,12.612844080000002,5.564247960000001},{7.524801600000002,9.557053800000002,12.559998360000003,13.627196160000004,6.008904360000002}}},{{{3.501254720000001,4.448312480000001,5.848807840000001,6.347120000000001,2.8067217600000007},{4.420337280000002,5.615551520000002,7.382686560000002,8.011270400000003,3.540180640000001},{5.758778560000001,7.315037440000001,9.615346880000002,10.433234560000002,4.605781440000001},{6.223566720000003,7.9050108800000025,10.390046400000003,11.273442560000005,4.974406720000001}},{{4.5131878400000005,5.7329989600000015,7.536124240000001,8.177301760000002,3.6107768800000004},{5.6959729600000015,7.234856240000001,9.509184560000001,10.317669440000003,4.552568720000001},{7.416967840000002,9.419648960000002,12.378566240000001,13.429933760000004,5.919478880000001},{8.013775360000002,10.177031840000001,13.372772960000002,14.508055040000006,6.391567520000001}},{{5.937722160000002,7.540662840000001,9.90873228,10.750025760000003,4.736494440000001},{7.490060640000001,9.511206360000001,12.496462920000003,13.556667840000003,5.968405560000001},{9.745885200000002,12.374097600000002,16.25477352,17.632305120000005,7.753709520000001},{10.526539680000003,13.364463120000002,17.554185360000005,19.041086400000005,8.368785840000003}}}});
        REQUIRE(allclose(rv, corr));
    }
}
